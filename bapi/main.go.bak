package main

import (
	"github.com/clerk/clerk-sdk-go/v2"
	clerkhttp "github.com/clerk/clerk-sdk-go/v2/http"
	"github.com/clerk/clerk-sdk-go/v2/user"
	"github.com/gorilla/mux"
	"net/http"
)

func main() {
	clerk.SetKey(`sk_test_VMN7hmeAu53WFuekKEjOyoZL9ZcMYZ8OdyYYke4Bv8`)

	router := mux.NewRouter()
	router.Use(enableCors)
	router.Handle("/hello", clerkhttp.WithHeaderAuthorization()(hello()))
	http.ListenAndServe(":8080", router)
}

func enableCors(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT, DELETE")
		w.Header().Set("Access-Control-Allow-Headers", "Accept, Content-Type, Content-Length, Accept-Encoding, Origin, Authorization")
		next.ServeHTTP(w, r)
	})
}

func hello() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()
		claims, ok := clerk.SessionClaimsFromContext(ctx)
		if !ok {
			w.WriteHeader(http.StatusUnauthorized)
			w.Write([]byte(`{"access": "unauthorized"}`))
			return
		}

		usr, err := user.Get(ctx, claims.Subject)
		if err != nil {
			panic(err)
		}
		if usr == nil {
			w.Write([]byte("User does not exist"))
			return
		}

		w.Write([]byte("Hello " + *usr.FirstName))
	}
}
